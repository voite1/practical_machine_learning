print("hi")
url <- 'https://finances.worldbank.org/api/views/uxhv-3yz2/rows.csv?accessType=DOWNLOAD'
data <- download.file(url)
data <- download.file(url, 'test.csv')
data
data <- read.csv('test.csv', header=T)
data
str(data)
pwd()
getwd()
setwd('C:/Users/Aleksey/Document/School/UW_Data_Visualization/UW_Data_Visualization_200/week2/homework')
setwd('C:\\Users\\Aleksey\\Document\\School\\UW_Data_Visualization\\UW_Data_Visualization_200\\week2\\homework')
url
data = read.csv(url)
data
str(data)
dim(data)
colnames(data)
plot(data$regions)
data$Region
data
data <- complete.cases(data)
dim(data)
data
ll
data = read.csv(url)
data
temp = complete.cases(data)
temp
dim(temp)
len(temp)
length(temp)
lengt(temp=F)temp
length(temp=FALSE)
length(temp="FALSE")
length(temp)
data[complete.cases(data),]
data = data[complete.cases(data),]
dim(data)
data
colnames(data)
data$Country
url = 'https://finances.worldbank.org/api/views/uxhv-3yz2/rows.csv?accessType=DOWNLOAD'
data = read.csv(url)
data$Country[, "Namibia"]
data$Country = "Namibia"
url = 'https://finances.worldbank.org/api/views/uxhv-3yz2/rows.csv?accessType=DOWNLOAD'
data = read.csv(url)
str(data)
data[data$Country = "Namibia",]
data[data$Country == "Namibia",]
namibia <- data[data$Country = "Namibia",]
namibia <- data[data$Country == "Namibia",]
str(namibia)
dim(namibia)
ll
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages('caret')
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
xnames <- colnames(concrete)[1:8]
featurePlot(x=training[, xnames], y=training$CompressiveStrength, plot="pairs")
library(caret)
library(rpart)
library(randomForest)
############### SET UP ENVIRONMENT AND DOWNLOAD DATA ########################
# Set appropriate working directory
# setwd('C:\\Users\\db345c\\Desktop\\Practical Machine Learning\\Final_Project')
setwd('C:\\Users\\Aleksey\\Documents\\School\\coursera\\Practical_Machine_Learning\\Final_Project')
# Check if the files exist locally, if not - download
training.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testing.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("pml-training.csv")) {
download.file(training.url, "pml-training.csv")
}
if(!file.exists("pml-testing.csv")){
download.file(testing.url, "pml-testing.csv")
}
######################## LOAD DATA ###########################################
# Load training and testing data sets
training <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
testing <- read.csv("pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
# cleanup unused variables
rm(training.url, testing.url)
######################## CLEANUP DATA ########################################
# identifying sparsely populated columns using nearZeroVar function
# from testing and training data sets
# Identical changes need to be made to testing and training data sets
to_skip <- nearZeroVar(training)
training <- training[, -to_skip]
testing <- testing[, -to_skip]
# cleanup unused variables
rm(to_skip)
# removing columns containing NA's only
# Identical changes need to be made to testing and training data sets
col_lst <- colSums(is.na(training)) == 0
training <- training[, col_lst]
testing <- testing[, col_lst]
# adjusting data - remove column 59 from the testing data (not needed)
testing <- testing[, -c(59)]
# creating simple dummy data with 5 levels identical to those in training data set
# iterate throug the data frame using sample function to select a sample of size 1 from
# vector called levels
train_levels <- levels(training$classe)
v <- vector(mode="character", length=0)
for (i in testing[,1]) {
x <- sample(train_levels, size=1, replace = TRUE)
v <- c(v, x)
}
# apppending dummy data (as factor) with the same factors and number of factors as in the training data
# as well as with the same name (simply for convenience)
testing$classe <- as.factor(v)
# Remove remove index, factor, and several date columns from training and testing data set
testing <- testing[, -c(1:6)]
training <- training[, -c(1:6)]
# cleanup unused variables
rm(col_lst, v, train_levels, x)
# coerse training and testing data to the same data types and fix factors in testing
for (i in 1:length(testing)) {
for(j in 1:length(training)) {
if( length(grep(names(training[i]), names(testing)[j])) == 1)  {
class(testing[j]) <- class(training[i])
}
}
}
# fix coersion that failed in previous step (this is required!!!)
for (i in 1:length(testing)) {
if (class(training[, i]) != class(testing[, i])) {
### try fixing coersion, so testing and training data frames match
class(training[, i]) <- class(testing[, i])
}
}
# cleanup unused variables
rm(inTrain, i, j)
# Partition data into two two sets - training and testing
# Identical changes need to be made to testing and training data sets
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
my_training <- training[inTrain,]
my_testing <- training[-inTrain,]
library(caret)
library(rpart)
library(randomForest)
############### SET UP ENVIRONMENT AND DOWNLOAD DATA ########################
# Set appropriate working directory
# setwd('C:\\Users\\db345c\\Desktop\\Practical Machine Learning\\Final_Project')
setwd('C:\\Users\\Aleksey\\Documents\\School\\coursera\\Practical_Machine_Learning\\Final_Project')
# Check if the files exist locally, if not - download
training.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testing.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("pml-training.csv")) {
download.file(training.url, "pml-training.csv")
}
if(!file.exists("pml-testing.csv")){
download.file(testing.url, "pml-testing.csv")
}
######################## LOAD DATA ###########################################
# Load training and testing data sets
training <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
testing <- read.csv("pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
# cleanup unused variables
rm(training.url, testing.url)
######################## CLEANUP DATA ########################################
# identifying sparsely populated columns using nearZeroVar function
# from testing and training data sets
# Identical changes need to be made to testing and training data sets
to_skip <- nearZeroVar(training)
training <- training[, -to_skip]
testing <- testing[, -to_skip]
# cleanup unused variables
rm(to_skip)
# removing columns containing NA's only
# Identical changes need to be made to testing and training data sets
col_lst <- colSums(is.na(training)) == 0
training <- training[, col_lst]
testing <- testing[, col_lst]
# adjusting data - remove column 59 from the testing data (not needed)
testing <- testing[, -c(59)]
# creating simple dummy data with 5 levels identical to those in training data set
# iterate throug the data frame using sample function to select a sample of size 1 from
# vector called levels
train_levels <- levels(training$classe)
v <- vector(mode="character", length=0)
for (i in testing[,1]) {
x <- sample(train_levels, size=1, replace = TRUE)
v <- c(v, x)
}
# apppending dummy data (as factor) with the same factors and number of factors as in the training data
# as well as with the same name (simply for convenience)
testing$classe <- as.factor(v)
# Remove remove index, factor, and several date columns from training and testing data set
testing <- testing[, -c(1:6)]
training <- training[, -c(1:6)]
# cleanup unused variables
rm(col_lst, v, train_levels, x)
# coerse training and testing data to the same data types and fix factors in testing
for (i in 1:length(testing)) {
for(j in 1:length(training)) {
if( length(grep(names(training[i]), names(testing)[j])) == 1)  {
class(testing[j]) <- class(training[i])
}
}
}
# fix coersion that failed in previous step (this is required!!!)
for (i in 1:length(testing)) {
if (class(training[, i]) != class(testing[, i])) {
### try fixing coersion, so testing and training data frames match
class(training[, i]) <- class(testing[, i])
}
}
# cleanup unused variables
rm(inTrain, i, j)
# Partition data into two two sets - training and testing
# Identical changes need to be made to testing and training data sets
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
my_training <- training[inTrain,]
my_testing <- training[-inTrain,]
######################## BUILD MODELS #########################################
# Build decision tree model
set.seed(212121)
treeFit <- rpart(classe ~., data=my_training, method="class")
treePredicted <- predict(treeFit, my_testing, type="class")
confusionMatrix(treePredicted, my_testing$classe)
# Build random forest model and run prediction
set.seed(212121)
# Set up cross validation trainControl
train_control <- trainControl(method="cv", number=10)
# Train the model
rfFit <- train(classe ~., data=my_training, trControl=train_control, method="rf")
** Assignment
9. Train the rfFit model using *my_training* data set (random forest algorythm) and run predictions using *my_testing* data set. The accuracy of the mode is better than 99%. Thus, rfFit should be used for prediction on the *testing* data set supplied for the assignment.
10.  Run prediction using rfFit model build using *my_training* data set and *testing* data set supplied for the assignment. Print out results.
library(caret)
library(rpart)
library(randomForest)
############### SET UP ENVIRONMENT AND DOWNLOAD DATA ########################
# Set appropriate working directory
# setwd('C:\\Users\\db345c\\Desktop\\Practical Machine Learning\\Final_Project')
setwd('C:\\Users\\Aleksey\\Documents\\School\\coursera\\Practical_Machine_Learning\\Final_Project')
# Check if the files exist locally, if not - download
training.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testing.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("pml-training.csv")) {
download.file(training.url, "pml-training.csv")
}
if(!file.exists("pml-testing.csv")){
download.file(testing.url, "pml-testing.csv")
}
######################## LOAD DATA ###########################################
# Load training and testing data sets
training <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
testing <- read.csv("pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
# cleanup unused variables
rm(training.url, testing.url)
######################## CLEANUP DATA ########################################
# identifying sparsely populated columns using nearZeroVar function
# from testing and training data sets
# Identical changes need to be made to testing and training data sets
to_skip <- nearZeroVar(training)
training <- training[, -to_skip]
testing <- testing[, -to_skip]
# cleanup unused variables
rm(to_skip)
# removing columns containing NA's only
# Identical changes need to be made to testing and training data sets
col_lst <- colSums(is.na(training)) == 0
training <- training[, col_lst]
testing <- testing[, col_lst]
# adjusting data - remove column 59 from the testing data (not needed)
testing <- testing[, -c(59)]
# creating simple dummy data with 5 levels identical to those in training data set
# iterate throug the data frame using sample function to select a sample of size 1 from
# vector called levels
train_levels <- levels(training$classe)
v <- vector(mode="character", length=0)
for (i in testing[,1]) {
x <- sample(train_levels, size=1, replace = TRUE)
v <- c(v, x)
}
# apppending dummy data (as factor) with the same factors and number of factors as in the training data
# as well as with the same name (simply for convenience)
testing$classe <- as.factor(v)
# Remove remove index, factor, and several date columns from training and testing data set
testing <- testing[, -c(1:6)]
training <- training[, -c(1:6)]
# cleanup unused variables
rm(col_lst, v, train_levels, x)
# Explore training and testing data to assure that all fields in both training and testing
# data sets have identical classes for each of the fields.
str(training)
str(testing)
# coerse training and testing data to the same data types and fix factors in testing
for (i in 1:length(testing)) {
for(j in 1:length(training)) {
if( length(grep(names(training[i]), names(testing)[j])) == 1)  {
class(testing[j]) <- class(training[i])
}
}
}
# fix coersion that failed in previous step (this is required!!!)
for (i in 1:length(testing)) {
if (class(training[, i]) != class(testing[, i])) {
### try fixing coersion, so testing and training data frames match
class(training[, i]) <- class(testing[, i])
}
}
# Partition data into two two sets - training and testing
# Identical changes need to be made to testing and training data sets
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
my_training <- training[inTrain,]
my_testing <- training[-inTrain,]
# cleanup unused variables
rm(inTrain, i, j)
######################## BUILD MODELS #########################################
# Build decision tree model and run predictions
set.seed(212121)
treeFit <- rpart(classe ~., data=my_training, method="class")
treePredicted <- predict(treeFit, my_testing, type="class")
# print confusion matrix for treePredicted vs. my_testing$classe
confusionMatrix(treePredicted, my_testing$classe)
# Build random forest model
set.seed(212121)
rfFit <- randomForest(classe ~., data=my_training)
rfPredicted <- predict(rfFit, my_testing, type="class")
# print convusion matrix for rfPredicted vs. my_testing$classe
confusionMatrix(rfPredicted, my_testing$classe)
############### PREDICTION ON THE TEST DATA SUPPLIED BY TEACHER ################
# printing the answer for the quiz
finalAnswer <- predict(rfFit, testing, type="class")
print(finalAnswer)
error_Rate = sum((testing$classe != finalAnswer) / length(finalAnswer))
print(error_rate)
error_rate = sum((testing$classe != finalAnswer) / length(finalAnswer))
print(error_rate)
error_rate = sum((my_testing$classe != rfPredicted) / length(rfPredicted))
print(error_rate)
print(c("The out of sample error rate is:", error_rate))
print(paste0("The out of sample error rate is:", error_rate))
print(paste0("The out of sample error rate is: ", error_rate))
paste0("The out of sample error rate is: ", error_rate)

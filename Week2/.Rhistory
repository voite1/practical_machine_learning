print("hi")
url <- 'https://finances.worldbank.org/api/views/uxhv-3yz2/rows.csv?accessType=DOWNLOAD'
data <- download.file(url)
data <- download.file(url, 'test.csv')
data
data <- read.csv('test.csv', header=T)
data
str(data)
pwd()
getwd()
setwd('C:/Users/Aleksey/Document/School/UW_Data_Visualization/UW_Data_Visualization_200/week2/homework')
setwd('C:\\Users\\Aleksey\\Document\\School\\UW_Data_Visualization\\UW_Data_Visualization_200\\week2\\homework')
url
data = read.csv(url)
data
str(data)
dim(data)
colnames(data)
plot(data$regions)
data$Region
data
data <- complete.cases(data)
dim(data)
data
ll
data = read.csv(url)
data
temp = complete.cases(data)
temp
dim(temp)
len(temp)
length(temp)
lengt(temp=F)temp
length(temp=FALSE)
length(temp="FALSE")
length(temp)
data[complete.cases(data),]
data = data[complete.cases(data),]
dim(data)
data
colnames(data)
data$Country
url = 'https://finances.worldbank.org/api/views/uxhv-3yz2/rows.csv?accessType=DOWNLOAD'
data = read.csv(url)
data$Country[, "Namibia"]
data$Country = "Namibia"
url = 'https://finances.worldbank.org/api/views/uxhv-3yz2/rows.csv?accessType=DOWNLOAD'
data = read.csv(url)
str(data)
data[data$Country = "Namibia",]
data[data$Country == "Namibia",]
namibia <- data[data$Country = "Namibia",]
namibia <- data[data$Country == "Namibia",]
str(namibia)
dim(namibia)
ll
setwd('C:\\Users\\Aleksey\\Documents\\School\\UW_Data_Visualization\\UW_Data_Visualization_200\\week2\\homework')
## Aleksey Kramer
## Data Viz 200
## Homework 2
## Needs to be changed
setwd('C:\\Users\\Aleksey\\Documents\\School\\UW_Data_Visualization\\UW_Data_Visualization_200\\week2\\homework')
# setwd('C:\\Users\\db345c\\Desktop\\UW_TRAIN\\Data Vis 200')
require(openxlsx)
seattle_file = 'Seattle Crime Data 2014.xlsx'
seattle = read.xlsx(seattle_file, sheet = 1, startRow = 1, colNames = TRUE)
portland_file = 'Portland Crime Data 2014.xlsx'
portland = read.xlsx(portland_file, sheet = 1, startRow = 1, colNames = TRUE)
rm(seattle_file, portland_file)
seattle$Offense.Type =  as.factor(seattle$Offense.Type)
portland$Major.Offense.Type = as.factor(portland$Major.Offense.Type)
par(las=2)
par(mar=c(17,4,5,5))
par(mfrow=c(2,1))
cols <- c("blue")
png(filename="Seattle.jpeg", height=600, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
dev.off()
png(filename="Portland.jpeg", height=600, width=800)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
dev.off()
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
par(mar=c(1,1,1,1))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
par(mfrow=c(1,2))
par(mar=c(1,1,1,1))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
## setwd('C:\\Users\\db345c\\Desktop\\Practical Machine Learning\\Week2')
setwd('C:\\Users\\Aleksey\\Documents\\School\\coursera\\Practical_Machine_Learning\\Week2')
######################################################################################
# LECTUR1: Caret Package  ############################################################
######################################################################################
library(caret)
library(kernlab)
data(spam)
# partition data 0.75 for training, 0.25 for testing, y is the variable to split on
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
# create training and testing subsets
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# Display training
dim(training)
# Building a model
set.seed(32343)
modelFit <- train(type ~., data=training, method="glm")
# Display the fit
modelFit
# Look at the final model of the fit
modelFit$finalModel
# Generate Predictions
predictions <- predict(modelFit, newdata=testing)
# Display predictions
predictions
# Build Confusion matrix
confusionMatrix(predictions, testing$type)
######################################################################################
# Data Slicing/cross validation ######################################################
######################################################################################
library(caret)
library(kernlab)
data(spam)
######################################################################################
# partition data 0.75 for training, 0.25 for testing, y is the variable to split on ##
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
# create training and testing subsets
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# Display training
dim(training)
######################################################################################
set.seed(32323)
# K-fold with 10-folds
# This can return return training set (returnTrain = TRUE) ###########################
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = TRUE)
# check the length of each folds
sapply(folds, length)
# Look at the first 10 elements of the first fold
folds[[1]][1:10]
######################################################################################
set.seed(32323)
# K-fold with 10 folds
# This can return return training set (returnTrain = FALSE)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = FALSE)
# Check the length of the testing set
sapply(folds, length)
######################################################################################
set.seed(32323)
# Resampling or Bootstrapping
# resample with replacement with 10-folds
folds <- createResample(y=spam$type, times=10, list=TRUE)
sapply(folds, length)
folds[[1]][1:10]
######################################################################################
set.seed(32323)
# time slicing
tme <- 1:1000
# continious value in time with 20 sample windows (predict next 10 samples out)
folds <- createTimeSlices(y=tme, initialWindow = 20, horizon=10)
# check the names in the folds list
names(folds)
# Look at the first train slice
folds$train[[1]]
# Look at the first test slice
folds$test[[1]]
install.packages('caret')
install.packages("caret")
install.packages('kernalb')
## setwd('C:\\Users\\db345c\\Desktop\\Practical Machine Learning\\Week2')
setwd('C:\\Users\\Aleksey\\Documents\\School\\coursera\\Practical_Machine_Learning\\Week2')
######################################################################################
# LECTUR1: Caret Package  ############################################################
######################################################################################
library(caret)
library(kernlab)
data(spam)
# partition data 0.75 for training, 0.25 for testing, y is the variable to split on
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
# create training and testing subsets
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# Display training
dim(training)
# Building a model
set.seed(32343)
modelFit <- train(type ~., data=training, method="glm")
# Display the fit
modelFit
# Look at the final model of the fit
modelFit$finalModel
# Generate Predictions
predictions <- predict(modelFit, newdata=testing)
# Display predictions
predictions
# Build Confusion matrix
confusionMatrix(predictions, testing$type)
######################################################################################
# Data Slicing/cross validation ######################################################
######################################################################################
library(caret)
library(kernlab)
data(spam)
######################################################################################
# partition data 0.75 for training, 0.25 for testing, y is the variable to split on ##
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
# create training and testing subsets
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# Display training
dim(training)
######################################################################################
set.seed(32323)
# K-fold with 10-folds
# This can return return training set (returnTrain = TRUE) ###########################
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = TRUE)
# check the length of each folds
sapply(folds, length)
# Look at the first 10 elements of the first fold
folds[[1]][1:10]
######################################################################################
set.seed(32323)
# K-fold with 10 folds
# This can return return training set (returnTrain = FALSE)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = FALSE)
# Check the length of the testing set
sapply(folds, length)
######################################################################################
set.seed(32323)
# Resampling or Bootstrapping
# resample with replacement with 10-folds
folds <- createResample(y=spam$type, times=10, list=TRUE)
sapply(folds, length)
folds[[1]][1:10]
######################################################################################
set.seed(32323)
# time slicing
tme <- 1:1000
# continious value in time with 20 sample windows (predict next 10 samples out)
folds <- createTimeSlices(y=tme, initialWindow = 20, horizon=10)
# check the names in the folds list
names(folds)
# Look at the first train slice
folds$train[[1]]
# Look at the first test slice
folds$test[[1]]
library(caret)
install.packages('caret')
library(caret)
library(kernlab)
install.packages('kernlab')
library(kernlab)
library(caret)
library(kernlab)
data(spam)
# partition data 0.75 for training, 0.25 for testing, y is the variable to split on
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
# create training and testing subsets
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# Display training
dim(training)
# Building a model
set.seed(32343)
modelFit <- train(type ~., data=training, method="glm")
# Display the fit
modelFit
# Look at the final model of the fit
modelFit$finalModel
# Generate Predictions
predictions <- predict(modelFit, newdata=testing)
# Display predictions
predictions
# Build Confusion matrix
confusionMatrix(predictions, testing$type)
######################################################################################
# Data Slicing/cross validation ######################################################
######################################################################################
library(caret)
library(kernlab)
data(spam)
######################################################################################
# partition data 0.75 for training, 0.25 for testing, y is the variable to split on ##
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
# create training and testing subsets
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# Display training
dim(training)
######################################################################################
set.seed(32323)
# K-fold with 10-folds
# This can return return training set (returnTrain = TRUE) ###########################
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = TRUE)
# check the length of each folds
sapply(folds, length)
# Look at the first 10 elements of the first fold
folds[[1]][1:10]
######################################################################################
set.seed(32323)
# K-fold with 10 folds
# This can return return training set (returnTrain = FALSE)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = FALSE)
# Check the length of the testing set
sapply(folds, length)
######################################################################################
set.seed(32323)
# Resampling or Bootstrapping
# resample with replacement with 10-folds
folds <- createResample(y=spam$type, times=10, list=TRUE)
sapply(folds, length)
folds[[1]][1:10]
######################################################################################
set.seed(32323)
# time slicing
tme <- 1:1000
# continious value in time with 20 sample windows (predict next 10 samples out)
folds <- createTimeSlices(y=tme, initialWindow = 20, horizon=10)
# check the names in the folds list
names(folds)
# Look at the first train slice
folds$train[[1]]
# Look at the first test slice
folds$test[[1]]
## setwd('C:\\Users\\db345c\\Desktop\\Practical Machine Learning\\Week2')
setwd('C:\\Users\\Aleksey\\Documents\\School\\coursera\\Practical_Machine_Learning\\Week2')
######################################################################################
# LECTUR1: Caret Package  ############################################################
######################################################################################
library(caret)
library(kernlab)
data(spam)
# partition data 0.75 for training, 0.25 for testing, y is the variable to split on
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
# create training and testing subsets
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# Display training
dim(training)
# Building a model
set.seed(32343)
modelFit <- train(type ~., data=training, method="glm")
# Display the fit
modelFit
# Look at the final model of the fit
modelFit$finalModel
# Generate Predictions
predictions <- predict(modelFit, newdata=testing)
# Display predictions
predictions
# Build Confusion matrix
confusionMatrix(predictions, testing$type)
######################################################################################
# Data Slicing/cross validation ######################################################
######################################################################################
library(caret)
library(kernlab)
data(spam)
######################################################################################
# partition data 0.75 for training, 0.25 for testing, y is the variable to split on ##
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
# create training and testing subsets
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# Display training
dim(training)
######################################################################################
set.seed(32323)
# K-fold with 10-folds
# This can return return training set (returnTrain = TRUE) ###########################
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = TRUE)
# check the length of each folds
sapply(folds, length)
# Look at the first 10 elements of the first fold
folds[[1]][1:10]
######################################################################################
set.seed(32323)
# K-fold with 10 folds
# This can return return training set (returnTrain = FALSE)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = FALSE)
# Check the length of the testing set
sapply(folds, length)
######################################################################################
set.seed(32323)
# Resampling or Bootstrapping
# resample with replacement with 10-folds
folds <- createResample(y=spam$type, times=10, list=TRUE)
sapply(folds, length)
folds[[1]][1:10]
######################################################################################
set.seed(32323)
# time slicing
tme <- 1:1000
# continious value in time with 20 sample windows (predict next 10 samples out)
folds <- createTimeSlices(y=tme, initialWindow = 20, horizon=10)
# check the names in the folds list
names(folds)
# Look at the first train slice
folds$train[[1]]
# Look at the first test slice
folds$test[[1]]
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
modelfit <- train(type ~ ., data = training, method = "glm")
summary(modelfit)
modelfit
